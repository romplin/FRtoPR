name: Complete CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly security scan on Monday at 2 AM
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      skip_tests:
        description: 'Skip tests (emergency deploy)'
        required: false
        default: false
        type: boolean

env:
  GO_VERSION: 1.23
  REGISTRY: ghcr.io
  IMAGE_NAME: romplin/frtopr

jobs:
  # ================================================================
  # TESTING & CODE QUALITY
  # ================================================================
  test:
    runs-on: ubuntu-latest
    if: ${{ !github.event.inputs.skip_tests }}
    outputs:
      should_deploy: ${{ steps.check_deploy.outputs.should_deploy }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v ./...

    - name: Run go vet
      run: go vet ./...

    - name: Check code formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "❌ The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi
        echo "✅ Code formatting is correct"

    - name: Build application
      run: |
        CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -ldflags '-w -s' -o feature-request-app .

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: feature-request-app-${{ github.sha }}
        path: feature-request-app
        retention-days: 30

    - name: Check if should deploy
      id: check_deploy
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "should_deploy=true" >> $GITHUB_OUTPUT
        else
          echo "should_deploy=false" >> $GITHUB_OUTPUT
        fi

  # ================================================================
  # SECURITY SCANNING
  # ================================================================
  security:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-fs-results.sarif'

  # ================================================================
  # DOCKER BUILD & PUBLISH
  # ================================================================
  docker:
    needs: [test, security]
    if: ${{ always() && (needs.test.outputs.should_deploy == 'true' || github.event.inputs.skip_tests == 'true') }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
      image_digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy image scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-image-results.sarif'

    - name: Upload Trivy image scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-image-results.sarif'

  # ================================================================
  # DEPLOY TO HETZNER
  # ================================================================
  deploy:
    needs: [docker]
    if: ${{ github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Deploy to Hetzner Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HETZNER_HOST }}
        username: ${{ secrets.HETZNER_USERNAME }}
        key: ${{ secrets.HETZNER_SSH_KEY }}
        port: ${{ secrets.HETZNER_PORT || 22 }}
        script: |
          # Deployment configuration
          DEPLOY_DIR="/opt/feature-request-app"
          IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          BACKUP_DIR="/opt/backups/feature-request-app"
          
          echo "🚀 Starting deployment..."
          echo "📦 Image: $IMAGE_NAME"
          echo "📁 Deploy directory: $DEPLOY_DIR"
          
          # Create directories
          sudo mkdir -p $DEPLOY_DIR $BACKUP_DIR
          cd $DEPLOY_DIR
          
          # Backup current deployment
          if [ -f docker-compose.yml ]; then
            echo "💾 Creating backup..."
            sudo cp docker-compose.yml $BACKUP_DIR/docker-compose-$(date +%Y%m%d-%H%M%S).yml
          fi
          
          # Login to registry
          echo "🔐 Logging into container registry..."
          echo "${{ secrets.GITHUB_TOKEN }}" | sudo docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          
          # Pull latest image
          echo "⬇️ Pulling latest image..."
          sudo docker pull $IMAGE_NAME
          
          # Stop existing containers gracefully
          echo "🛑 Stopping existing containers..."
          sudo docker-compose down --timeout 30 2>/dev/null || true
          
          # Create new docker-compose.yml
          echo "📝 Creating docker-compose configuration..."
          sudo tee docker-compose.yml > /dev/null <<EOF
          version: '3.8'
          services:
            app:
              image: $IMAGE_NAME
              ports:
                - "8080:8080"
              environment:
                - PORT=8080
                - GITHUB_MCP_SERVER_URL=${{ secrets.GITHUB_MCP_SERVER_URL }}
                - GITHUB_MCP_TOKEN=${{ secrets.GITHUB_MCP_TOKEN }}
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s
              labels:
                - "deployment.version=${{ github.sha }}"
                - "deployment.timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          EOF
          
          # Start new containers
          echo "▶️ Starting new containers..."
          sudo docker-compose up -d
          
          # Wait for health check
          echo "🏥 Waiting for application to be healthy..."
          max_attempts=30
          attempt=0
          
          while [ $attempt -lt $max_attempts ]; do
            if curl -f http://localhost:8080/health > /dev/null 2>&1; then
              echo "✅ Application is healthy!"
              break
            fi
            attempt=$((attempt + 1))
            echo "⏳ Health check attempt $attempt/$max_attempts..."
            sleep 2
          done
          
          if [ $attempt -eq $max_attempts ]; then
            echo "❌ Health check failed, rolling back..."
            sudo docker-compose down
            if [ -f $BACKUP_DIR/docker-compose-*.yml ]; then
              latest_backup=$(ls -t $BACKUP_DIR/docker-compose-*.yml | head -n1)
              sudo cp "$latest_backup" docker-compose.yml
              sudo docker-compose up -d
            fi
            exit 1
          fi
          
          # Cleanup old images
          echo "🧹 Cleaning up old images..."
          sudo docker image prune -f
          
          # Show deployment status
          echo "📊 Deployment Status:"
          sudo docker-compose ps
          
          echo "🎉 Deployment completed successfully!"
          echo "🌐 Application URL: http://${{ secrets.HETZNER_HOST }}:8080"

    - name: Verify deployment
      run: |
        echo "🔍 Verifying deployment..."
        sleep 10
        
        response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.HETZNER_HOST }}:8080/health)
        if [ $response -eq 200 ]; then
          echo "✅ External health check passed!"
        else
          echo "❌ External health check failed with status: $response"
          exit 1
        fi

  # ================================================================
  # NOTIFICATION & CLEANUP
  # ================================================================
  notify:
    needs: [test, security, docker, deploy]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Deployment Success Notification
      if: ${{ needs.deploy.result == 'success' }}
      run: |
        echo "🎉 Deployment successful!"
        echo "📋 Summary:"
        echo "  - Environment: ${{ github.event.inputs.environment || 'production' }}"
        echo "  - Commit: ${{ github.sha }}"
        echo "  - Image: ${{ needs.docker.outputs.image_tag }}"
        echo "  - URL: http://${{ secrets.HETZNER_HOST }}:8080"

    - name: Deployment Failure Notification
      if: ${{ needs.deploy.result == 'failure' }}
      run: |
        echo "❌ Deployment failed!"
        echo "📋 Failed jobs:"
        echo "  - Test: ${{ needs.test.result }}"
        echo "  - Security: ${{ needs.security.result }}"
        echo "  - Docker: ${{ needs.docker.result }}"
        echo "  - Deploy: ${{ needs.deploy.result }}"
        exit 1

    - name: Test Failure Notification
      if: ${{ needs.test.result == 'failure' }}
      run: |
        echo "❌ Tests failed - deployment skipped"
        exit 1
